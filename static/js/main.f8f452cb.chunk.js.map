{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","registerServiceWorker.js","index.js"],"names":["Titles","React","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","App","weather","setWeather","useState","undefined","async","e","preventDefault","target","elements","value","api_call","fetch","concat","data","json","list","length","main","temp","sys","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f8f452cb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = () => (\n    <div>\n        <h1 className=\"title-container__title\"> Weather Finder </h1>\n        <p className=\"title-container__subtitle\"> Find out temperature conditions and more. </p>\n    </div>\n)\n\nexport default Titles;","import React from \"react\";\n\nconst Form = props => (\n    <form onSubmit={props.getWeather} className=\"form\">\n        <input type=\"text\" name=\"city\" placeholder=\"City\" />\n        <input type=\"text\" name=\"country\" placeholder=\"Country\" />\n        <button>Get Weather</button>\n    </form>\n)\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n    <div className=\"weather__info\">\n        {\n            props.city && props.country && <p className=\"weather__key\">Location:\n            <span className=\"weather__value\"> {props.city}, {props.country}</span>\n            </p>\n        }\n        {\n            props.temperature && <p className=\"weather__key\">Temperature:\n            <span className=\"weather__value\"> {props.temperature}</span>\n            </p>\n        }\n        {\n            props.humidity && <p className=\"weather__key\">Humidity:\n            <span className=\"weather__value\"> {props.humidity}</span>\n            </p>\n        }\n        {\n            props.description && <p className=\"weather__key\">Conditions:\n            <span className=\"weather__value\"> {props.description}</span>\n            </p>\n        }\n        {\n            props.error && <p className=\"weather__error\">{props.error}</p>\n        }\n    </div>\n)\n\nexport default Weather;","import React, { useState } from \"react\";\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"d2283662ab9b692fc4f461a95c137ff2\"\n\nconst App = () => {\n    const [weather, setWeather] = useState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: undefined\n    })\n    const getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/find?q=${city},${country}&appid=${API_KEY}&units=metric`);\n        const data = await api_call.json();\n        if (data && data.list.length > 0) {\n            setWeather({\n                temperature: data.list[0].main.temp,\n                city: data.list[0].name,\n                country: data.list[0].sys.country,\n                humidity: data.list[0].main.humidity,\n                description: data.list[0].weather[0].description,\n                error: \"\"\n            })\n        } else {\n            setWeather({\n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                error: \"Please enter a valid city and country.\"\n            })\n        }\n    }\n    return (\n        <div>\n            <div className=\"wrapper\">\n                <div className=\"main\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col title-container\">\n                                <Titles />\n                            </div>\n                            <div className=\"col form-container\">\n                                <Form getWeather={getWeather} />\n                                <Weather\n                                    temperature={weather.temperature}\n                                    city={weather.city}\n                                    country={weather.country}\n                                    humidity={weather.humidity}\n                                    description={weather.description}\n                                    error={weather.error}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}